// NB: Calculation for lotsize changes.

int start(){ 
  //OrderSend("symbol",cmd,lot,price,slippage,sl,tp);
  
   buyStop();
   sellStop();
   return 0;
}

void buyStop() {
  double buyPrice = Ask + 2 * Point;
  double buySL  = buyPrice  - 3 * Point;
  double buyTP  = buyPrice  + 7 * Point;
   
  int buy  = OrderSend("EURUSD", OP_BUYSTOP , 0.1, buyPrice, 0, buySL,  buyTP);
}

void sellStop() {
   double sellPrice = Ask - 2 * Point;
   double sellSL = sellPrice + 3 * Point;
   double sellTP = sellPrice - 7 * Point;
   
   int sell = OrderSend("EURUSD", OP_SELLSTOP, 0.1, sellPrice,0, sellSL, sellTP);
}

bool getSignal(int totalOrders){
   return totalOrders == 0;
}

int getLiveOrders(int totalOrders) {
 
   if (totalOrders == 1){
      for (int i = 0; i < totalOrders; i++) {
        if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) {
          // Check if the order is a pending buy limit order with the specified symbol, price, and lot size
          if (OrderType() == OP_BUYSTOP || OrderType() == OP_SELLSTOP) {
             int ticket = OrderTicket(); // Get the ticket number of the matching order
             return ticket;
          }
        }
      }
   }
   
   return 0;
}


void deleteLiveOrder(int ticket) {
    if (ticket != 0) {
      bool yesNo = OrderDelete(ticket);
    }
}

double getTargetLotSize(double balance) {
   int roundedBalance = MathRound(balance);
   double targetSize = (roundedBalance * 0.012) / 3;
   double roundedTargetSize = MathRound(targetSize * 100) / 100.0;
   return roundedTargetSize;
}

void OnTick() {
   //double balance = AccountBalance();
   int totalOrders = OrdersTotal();
   if (getSignal(totalOrders)) {
      start();
   }
   else {
     int ticket = getLiveOrders(totalOrders);
     deleteLiveOrder(ticket);
   }
}
